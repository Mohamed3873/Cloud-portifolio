name: Terraform Deployment Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.7
        
    - name: Install TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      shell: bash

    - name: Lint Terraform Files with TFLint
      run: tflint --chdir ./src/main/terraform
      shell: bash
      
    - name: Decode GCP Credentials Secret
      run: |
        echo "${{ secrets.GCP_CREDENTIALS }}" | base64 --decode > /tmp/gcp_credentials.json
        echo "GCP credentials decoded successfully"
      shell: bash

    - name: Verify GCP Credentials File
      run: |
        if [ ! -s /tmp/gcp_credentials.json ]; then
          echo "GCP credentials file is empty or does not exist"
          exit 1
        else
          echo "GCP credentials file created successfully"
        fi
      shell: bash

    - name: Debug Environment
      run: env | sort

    - name: Validate GCP Credentials File Format
      run: |
        cat /tmp/gcp_credentials.json | jq .
      shell: bash

    - name: Terraform Init
      run: terraform init
      working-directory: ./src/main/terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./src/main/terraform

    - name: Destroy Frontend Server (Clean Up Old Instance)
      run: terraform destroy -target=google_compute_instance.frontend_server -auto-approve
      env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_user: ${{ secrets.DB_USER}}
          TF_VAR_db_host: ${{ secrets.DB_Host}}
          TF_VAR_db_name: ${{ secrets.DB_NAME}}
          TF_VAR_db_port: ${{ secrets.DB_PORT}}
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
      working-directory: ./src/main/terraform

    - name: Terraform Refresh
      env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_user: ${{ secrets.DB_USER}}
          TF_VAR_db_host: ${{ secrets.DB_Host}}
          TF_VAR_db_name: ${{ secrets.DB_NAME}}
          TF_VAR_db_port: ${{ secrets.DB_PORT}}
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
      run: terraform refresh
      working-directory: ./src/main/terraform


    - name: Terraform Plan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_db_user: ${{ secrets.DB_USER}}
        TF_VAR_db_host: ${{ secrets.DB_Host}}
        TF_VAR_db_name: ${{ secrets.DB_NAME}}
        TF_VAR_db_port: ${{ secrets.DB_PORT}}
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
      run: terraform plan -refresh=true
      working-directory: ./src/main/terraform

    - name: Import Cloud SQL Instance if needed
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_db_user: ${{ secrets.DB_USER}}
        TF_VAR_db_host: ${{ secrets.DB_Host}}
        TF_VAR_db_name: ${{ secrets.DB_NAME}}
        TF_VAR_db_port: ${{ secrets.DB_PORT}}
      run: |
        if ! terraform state list | grep -q 'google_sql_database_instance.my_mysql_instance'; then
          echo "Cloud SQL instance not found in state, importing..."
          terraform import google_sql_database_instance.my_mysql_instance projects/awesome-destiny-436710-j1/instances/cloud-sql
        else
          echo "Cloud SQL instance already in state."
        fi
      working-directory: ./src/main/terraform

    - name: Import Cloud SQL Database if needed
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_db_user: ${{ secrets.DB_USER}}
        TF_VAR_db_host: ${{ secrets.DB_Host}}
        TF_VAR_db_name: ${{ secrets.DB_NAME}}
        TF_VAR_db_port: ${{ secrets.DB_PORT}}
      run: |
        if ! terraform state list | grep -q 'google_sql_database.my_database'; then
          echo "Database not found in state, importing..."
          terraform import google_sql_database.my_database projects/awesome-destiny-436710-j1/instances/cloud-sql/databases/terraform_database
        else
          echo "Database already in state."
        fi
      working-directory: ./src/main/terraform

   
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
      run: terraform apply -refresh=true -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}" -var="db_user=${{ secrets.DB_USER }}" -var="db_host=${{ secrets.DB_HOST }}" -var="db_port=${{ secrets.DB_PORT }}" -var="db_name=${{ secrets.DB_NAME }}"
      working-directory: ./src/main/terraform

      
  verify_backend:
    runs-on: ubuntu-latest
    needs: deploy  
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      # Checkout code again to run tests
      - name: Checkout code
        uses: actions/checkout@v2
        
      # Verify Backend Service is Running
      - name: Verify Backend Service is Running
        run: |
          curl --fail http://34.77.4.205:8080 || exit 1
        shell: bash

      # Verify Backend data retrival form the database 
      - name: Verify Backend data retrival form the database 
        run: |
          curl --fail http://34.77.4.205:8080/data || exit 1
        shell: bash


      # Run Backend Tests
      - name: Run Backend Api Tests
        run: |
          python ./src/main/backend/test.py 
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

          
  test_frontend:
    runs-on: ubuntu-latest
    needs: deploy  # Run this after deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:

    - name: Checkout the repository
      uses: actions/checkout@v4

     # Dynamic Readiness Check (Step 6)
    - name: Wait for Frontend Readiness
      run: |
          echo "Waiting for frontend readiness..."
          for i in {1..12}; do
            if curl --fail http://<frontend-url>/ > /dev/null 2>&1; then
              echo "Frontend is ready!"
              break
            fi
            echo "Retrying... ($i/12)"
            sleep 5
          done || (echo "Frontend readiness check failed"; exit 1)

        
    - name: List All Files
      run: |
            echo "Listing all files:"
            ls -R


    - name: Install dependencies
      run: npm install
      working-directory: ./src/main/frontend

    - name: Run Cypress Tests
      run: npx cypress run
      working-directory: ./src/main/frontend

    - name: Check Frontend Accessibility
      run: |
        curl --fail http://34.78.241.203/ || exit 1
      shell: bash


  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()  # Rollback will only run if the "deploy" job fails
    steps:
      # Checkout code for rollback action
      - name: Checkout code
        uses: actions/checkout@v2

      # Rollback Terraform Apply if needed
      - name: Rollback on Failure
        run: terraform apply -auto-approve -refresh-only -var="db_password=${{ secrets.DB_PASSWORD }}" -var="db_user=${{ secrets.DB_USER }}" -var="db_host=${{ secrets.DB_HOST }}" -var="db_port=${{ secrets.DB_PORT }}" -var="db_name=${{ secrets.DB_NAME }}"
        working-directory: ./src/main/terraform


